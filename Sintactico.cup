package analizadorLexico;
import vista.ErrorSintactico;
import java_cup.runtime.*;
import java.io.File;
import java.util.*;
import java.lang.*;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import jflex.core.sym;
import vista.VentanaPrincipal;


parser code
{:
    public void syntax_error(Symbol s) throws ErrorSintactico {
        throw new ErrorSintactico("Error en la columna " + (s.right+1) + " Linea " + s.left + ". " + s + " no reconocido. valor " + s.value);
        //VentanaPrincipal.je.append("Error en la linea " + (s.right+1) + " columna " + s.left + ". " + s + " no reconocido. valor " + s.value);
    }
:}

action code
{:
    List<String[]> tabla_de_simbolos = new ArrayList<>();

    void guardarTablaSimbolos() {
            try {
                // Determinar la ruta del archivo en la misma carpeta que el .jar
                String rutaArchivo = new File(Main.class.getProtectionDomain().getCodeSource().getLocation().toURI())
                                        .getParent() + File.separator + "tabla_de_simbolos.txt";

                try (BufferedWriter writer = new BufferedWriter(new FileWriter(rutaArchivo))) {
                    // Columnas
                    writer.write(String.format("%-50s %-15s %-20s %-50s %-5s", "Nombre", "Token", "Tipo", "Valor", "Long"));
                    writer.newLine();
                    writer.write("--------------------------------------------------------------------------------------------------------------------------------------------------------");
                    writer.newLine();

                    // Filas
                    for (String[] simbolo : tabla_de_simbolos) {
                        writer.write(String.format("%-50s %-15s %-20s %-50s %-5s", simbolo[0], simbolo[1], simbolo[2], simbolo[3], simbolo[4]));
                        writer.newLine();
                    }

                    System.out.println("Archivo guardado en: " + rutaArchivo);

                } catch (IOException e) {
                    System.err.println("Error al escribir la tabla de sÃ­mbolos en el archivo: " + e.getMessage());
                }
            } catch (Exception e) {
                System.err.println("Error al determinar la ruta del archivo: " + e.getMessage());
            }
        }

    void guardarTipoId(Object t, String id) {
        boolean existe = false;
        for (String[] simbolo : tabla_de_simbolos) {
            if (simbolo[0].equals(id)) {
                existe = true;
                break;
            }
        }
        if (!existe) {
            String[] simbolo = {id.toString(), "ID", t.toString(), "_", "_"};
            tabla_de_simbolos.add(simbolo);
        }
        guardarTablaSimbolos();
    }
:}

terminal WHILE, IF, THEN, ELSE, ASIGN, DECLARA, OP_SUMA, OP_POR, OP_RESTA, OP_DIVISION, COR_APERTURA, COR_CIERRE, WRITE, MAYOR,
         MENOR, MAYOR_IGUAL, MENOR_IGUAL, IGUAL, NEGACION, DISTINTO, AND, PAR_APERTURA, PAR_CIERRE, OR, DECLARE_SECTION,
         ENDDECLARE_SECTION, PROGRAM_SECTION, ENDPROGRAM_SECTION, END_LINE, SEP_LIST, TIPO_INT, TIPO_FLOAT, TIPO_STRING,
         TAKE, ID, CONST_BIN, CONST_INT, CONST_STR, CONST_FLOAT;


non terminal inicio, solo_write, sector_declarativo, declaraciones, declaracion, recursion, tipo, programa, bloque_programa, sentencia,
             asignacion, expresion, operador, lista_constantes, termino, factor, take_cuerpo, escritura, cuerpo_escritura, seleccion,
             condicion, comparacion, comparador, iteracion;

precedence left ELSE;

start with inicio;


inicio ::= sector_declarativo:sd programa:p {: VentanaPrincipal.je.append("\n[regla 0] inicio sector_declarativo programa  ----> " + sd + p); :}
         | solo_write:w {: VentanaPrincipal.je.append("\n[regla 1] inicio solo_write  ----> " + w); :};

solo_write ::= WRITE:w CONST_STR:st END_LINE:el {: VentanaPrincipal.je.append("\n[regla 2] WRITE CONST_ST ;"); RESULT = w.toString() + st.toString() + el.toString(); :}
             | solo_write:sw WRITE:w CONST_STR:st END_LINE:el  {: VentanaPrincipal.je.append("\n[regla 3] WRITE CONST_ST ; solo_write"); RESULT = sw.toString() + w.toString() + st.toString() + el.toString(); :};

sector_declarativo ::= DECLARE_SECTION:ds ENDDECLARE_SECTION:es {: VentanaPrincipal.je.append("\n[regla 4] D_S ED_S  ----> " + ds + es); RESULT = ds.toString() + es.toString(); :}
                     | DECLARE_SECTION:ds declaraciones:d ENDDECLARE_SECTION:es {: VentanaPrincipal.je.append("\n[regla 5] D_S declaraciones ED_S  ----> " + ds + d + es); RESULT = ds.toString() + d.toString() + es.toString(); :};

declaraciones ::= declaracion:d {: VentanaPrincipal.je.append("\n[regla 6] declaracion"); RESULT = d; :}
                | declaraciones:ds declaracion:d {: VentanaPrincipal.je.append("\n[regla 7] declaraciones  declaracion"); RESULT = ds.toString() + d.toString(); :};

declaracion ::= COR_APERTURA:ca recursion:r COR_CIERRE:cc  {: VentanaPrincipal.je.append("\n[regla 8] [ recursion ]  ----> " + ca + r + cc); RESULT = ca.toString() + r.toString() + cc.toString(); :};

recursion ::= ID:id SEP_LIST:sl recursion:r SEP_LIST:sl2 tipo:t {:
                                                                    VentanaPrincipal.je.append("\n[regla 9] ID, recursion ,tipo");
                                                                    RESULT = id.toString() + sl.toString() + r.toString() + sl2.toString() + t.toString();
                                                                    boolean existe = false;
                                                                    guardarTipoId(t, id.toString());
                                                                :}
            | ID:id COR_CIERRE:cc DECLARA:d COR_APERTURA:ca tipo:t {:
                                                                        VentanaPrincipal.je.append("\n[regla 10] ID] := [tipo");
                                                                        RESULT = id.toString() + cc.toString() + d.toString() + ca.toString() + t.toString();
                                                                        guardarTipoId(t, id.toString());
                                                                   :};

tipo ::= TIPO_INT:ti {: VentanaPrincipal.je.append("\n[regla 11] TIPO_INT"); RESULT = ti;:}
       | TIPO_FLOAT:tf {: VentanaPrincipal.je.append("\n[regla 12] TIPO_FLOAT"); RESULT = tf;:}
       | TIPO_STRING:ts {: VentanaPrincipal.je.append("\n[regla 13] TIPO_STRING"); RESULT = ts;:};

programa ::= PROGRAM_SECTION:ps bloque_programa:bp ENDPROGRAM_SECTION:eps {: VentanaPrincipal.je.append("\n[regla 14] PS bloque_programa EPS  ----> " + ps + bp + eps); RESULT = ps.toString() + bp.toString() + eps.toString(); :};

bloque_programa ::= sentencia:s {: VentanaPrincipal.je.append("\n[regla 15] lista_sentencias  ----> " + s); RESULT = s; :}
                  | bloque_programa:bp sentencia:s {: VentanaPrincipal.je.append("\n[regla 16] lista_sentencias sentencia  ----> " + bp + s); RESULT = bp.toString() + s.toString(); :};

sentencia ::= asignacion:a {: VentanaPrincipal.je.append("\n[regla 17] asignacion  ----> " + a); RESULT = a; :}
            | iteracion:i {: VentanaPrincipal.je.append("\n[regla 18] iteracion  ----> " + i); RESULT = i; :}
            | seleccion:s {: VentanaPrincipal.je.append("\n[regla 19] seleccion  ----> " + s); RESULT = s; :}
            | escritura:e {: VentanaPrincipal.je.append("\n[regla 20] escritura  ----> " + e); RESULT = e; :};

asignacion ::= ID:id ASIGN:a expresion:e END_LINE:el {: VentanaPrincipal.je.append("\n[regla 21] ID ::= expresion  ----> " + id + a + e + el); RESULT = id.toString() + a.toString() + e.toString() + el.toString(); :};

expresion ::= expresion:e OP_SUMA:os termino:t {: VentanaPrincipal.je.append("\n[regla 22] expresion + termino  ----> " + e + os + t); RESULT = e.toString() + os.toString() + t.toString(); :}
            | expresion:e OP_RESTA:or termino:t {: VentanaPrincipal.je.append("\n[regla 23] expresion - termino  ----> " + e + or + t); RESULT = e.toString() + or.toString() + t.toString(); :}
            | termino:t {: VentanaPrincipal.je.append("\n[regla 24] termino  ----> " + t); RESULT = t; :};

termino ::= termino:t OP_POR:op factor:f {: VentanaPrincipal.je.append("\n[regla 25] termino * factor  ----> " + t + op + f); RESULT = t.toString() + op.toString() + f.toString();:}
          | termino:t OP_DIVISION:od factor:f {: VentanaPrincipal.je.append("\n[regla 26] termino / factor  ----> " + t + od + f); RESULT = t.toString() + od.toString() + f.toString();:}
          | factor:f  {: VentanaPrincipal.je.append("\n[regla 27] factor  ----> " + f); RESULT = f;:};

factor ::= PAR_APERTURA:pa expresion:ex PAR_CIERRE:pc {: VentanaPrincipal.je.append("\n[regla 28] ( expresion )  ----> " + pa + ex + pc); RESULT = pa.toString() + ex.toString() + pc.toString();:}
         | ID:id {: VentanaPrincipal.je.append("\n[regla 29] ID  ----> " + id); RESULT = id;:}
         | CONST_INT:ci {:
                            VentanaPrincipal.je.append("\n[regla 30] CONST_INT  ----> " + ci); RESULT = ci;
                            String[] simbolo = {"_" + ci.toString(), "CONST_INT", "_", ci.toString(), "_"};
                            tabla_de_simbolos.add(simbolo);
                            guardarTablaSimbolos();

                        :}
         | CONST_FLOAT:cf {:
                            VentanaPrincipal.je.append("\n[regla 31] CONST_FLOAT  ----> " + cf); RESULT = cf;
                            String[] simbolo = {"_" + cf.toString(), "CONST_FLOAT", "_", cf.toString(), "_"};
                            tabla_de_simbolos.add(simbolo);
                            guardarTablaSimbolos();
                          :}
         | CONST_BIN:cb {:
                            VentanaPrincipal.je.append("\n[regla 32] CONST_BIN  ----> " + cb); RESULT = cb;
                            String[] simbolo = {"_" + cb.toString(), "CONST_BIN", "_", cb.toString(), "_"};
                            tabla_de_simbolos.add(simbolo);
                            guardarTablaSimbolos();
                        :}
         | CONST_STR:CS {:
                            VentanaPrincipal.je.append("\n[regla 33] CONST_STR  ----> " + CS); RESULT = CS;
                            String[] simbolo = {"_" + CS.toString(), "CONST_STR", "_", CS.toString(), "_"};
                            tabla_de_simbolos.add(simbolo);
                            guardarTablaSimbolos();
                        :}
         | take_cuerpo:tc {: VentanaPrincipal.je.append("\n[regla 34] take_cuerpo  ----> " + tc); RESULT = tc;:};

take_cuerpo ::= TAKE:t PAR_APERTURA:pa operador:op END_LINE:el ID:id END_LINE:el2 COR_APERTURA:ca lista_constantes:lc COR_CIERRE:cc PAR_CIERRE:pc  {: VentanaPrincipal.je.append("\n[regla 35] TAKE (operador;ID;[lista_constantes]);  ----> " + t + pa +op + el + id + el2 + ca + lc + cc + pc); RESULT = t.toString() + pa.toString() + op.toString() + el.toString() + id.toString() + el2.toString() + ca.toString() + lc.toString() + cc.toString() + pc.toString(); :}
              | TAKE:t PAR_APERTURA:pa operador:op END_LINE:el ID:id END_LINE:el2 COR_APERTURA:ca  COR_CIERRE:cc PAR_CIERRE:pc  {: VentanaPrincipal.je.append("\n[regla 36] TAKE (operador;ID;[]);  ----> " + t + pa +op + el + id + el2 + ca + cc + pc ); RESULT = t.toString() + pa.toString() + op.toString() + el.toString() + id.toString() + el2.toString() + ca.toString() + cc.toString() + pc.toString(); :};

operador ::= OP_SUMA:op {: VentanaPrincipal.je.append("\n[regla 37] + "); RESULT = op; :}
           | OP_POR:op {: VentanaPrincipal.je.append("\n[regla 38] * "); RESULT = op; :};

lista_constantes ::= lista_constantes:lc SEP_LIST:sp expresion:e {: VentanaPrincipal.je.append("\n[regla 39] lista_constantes,expresion  ----> " + lc + sp + e); RESULT = lc.toString() + sp.toString() + e.toString(); :}
                   | expresion:ex {: VentanaPrincipal.je.append("\n[regla 40] expresion  ----> " + ex); RESULT = ex; :};

iteracion ::= WHILE:w PAR_APERTURA:pa condicion:c PAR_CIERRE:pc bloque_programa:bp {: VentanaPrincipal.je.append("\n[regla 41] WHILE (condicion) bloque_programa  ----> " + w + pa + c + pc + bp); RESULT = w.toString() + pa.toString() + c.toString() + pc.toString() + bp.toString(); :};

condicion ::= NEGACION:n PAR_APERTURA:pa condicion:c PAR_CIERRE:pc {: VentanaPrincipal.je.append("\n[regla 42] !(condicion)  ----> " + n + pa + c + pc); RESULT = n.toString() + pa.toString() + c.toString() + pc.toString(); :}
            | comparacion:cp {: VentanaPrincipal.je.append("\n[regla 43] comparacion  ----> " + cp); RESULT = cp; :}
            | comparacion:cp1 AND:a comparacion:cp2 {: VentanaPrincipal.je.append("\n[regla 44] comparacion && comparacion  ----> " + cp1 + " " + a + " " + cp2); RESULT = cp1.toString() + a.toString() + cp2.toString(); :}
            | comparacion:cp1 OR:o comparacion:cp2 {: VentanaPrincipal.je.append("\n[regla 45] comparacion || comparacion  ----> " + cp1 + " " + o + " " + cp2); RESULT = cp1.toString() + o.toString() + cp2.toString();:};

comparacion ::= expresion:ex1 comparador:com expresion:ex2 {: VentanaPrincipal.je.append("\n[regla 46] expresion comparador expresion  ----> " + ex1 + " " + com + " " + ex2); RESULT = ex1.toString() + com.toString() + ex2.toString(); :};

comparador ::= MAYOR:ma {: VentanaPrincipal.je.append("\n[regla 47] >"); RESULT = ma; :}
             | MENOR:me {: VentanaPrincipal.je.append("\n[regla 48] <"); RESULT = me; :}
             | IGUAL:ig {: VentanaPrincipal.je.append("\n[regla 49] =="); RESULT = ig; :}
             | MAYOR_IGUAL:mai {: VentanaPrincipal.je.append("\n[regla 50] >="); RESULT = mai; :}
             | MENOR_IGUAL:mei {: VentanaPrincipal.je.append("\n[regla 51] <="); RESULT = mei; :}
             | DISTINTO:dis {: VentanaPrincipal.je.append("\n[regla 52] != "); RESULT = dis; :};

seleccion ::= IF:i PAR_APERTURA:pa condicion:c PAR_CIERRE:pc THEN:th bloque_programa:bp1 ELSE:els bloque_programa:bp2 {: VentanaPrincipal.je.append("\n[regla 53] IF (condicion) THEN bloque_programa ELSE bloque_programa  ----> " + i + pa + c + pc + th + bp1 + els + bp2); RESULT = i.toString() + pa.toString() + c.toString() + pc.toString() + th.toString() + bp1.toString() + els.toString() + bp2.toString(); :}
            | IF:i PAR_APERTURA:pa condicion:c PAR_CIERRE:pc THEN:th bloque_programa:bp1 {: VentanaPrincipal.je.append("\n[regla 54] IF (condicion) THEN bloque_programa  ----> " + i + pa + c + pc + th + bp1); RESULT = i.toString() + pa.toString() + c.toString() + pc.toString() + th.toString() + bp1.toString(); :};

escritura ::= WRITE:wr cuerpo_escritura:ce END_LINE:el {: VentanaPrincipal.je.append("\n[regla 55] WRITE cuerpo_escritura;  ----> WRITE "+ ce + ";"); RESULT = wr.toString() + ce.toString() + el.toString(); :}
            | escritura:e WRITE:wr cuerpo_escritura:ce END_LINE:el  {: VentanaPrincipal.je.append("\n[regla 56] escritura WRITE cuerpo_escritura;  ----> "+ e + " WRITE " + ce + ";"); RESULT = e.toString() + wr.toString() + ce.toString() + el.toString(); :};

cuerpo_escritura ::= CONST_STR:cs {: VentanaPrincipal.je.append("\n[regla 57] CONST_STR  ----> " + cs); RESULT = cs;:}
                   | CONST_INT:ci {: VentanaPrincipal.je.append("\n[regla 58] CONST_INT  ----> " + ci); RESULT = ci; :}
                   | CONST_FLOAT:cf {: VentanaPrincipal.je.append("\n[regla 59] CONST_FLOAT  ----> " + cf); RESULT = cf; :}
                   | CONST_BIN:cb {: VentanaPrincipal.je.append("\n[regla 60] CONST_BIN  ----> " + cb); RESULT = cb; :}
                   | ID:id {: VentanaPrincipal.je.append("\n[regla 61] ID  ----> " + id); RESULT = id; :};